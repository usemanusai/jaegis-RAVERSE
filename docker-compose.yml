version: '3.8'

services:
  # PostgreSQL 17 with pgvector and pgai extensions
  postgres:
    image: pgvector/pgvector:pg17
    container_name: raverse-postgres
    environment:
      POSTGRES_USER: raverse
      POSTGRES_PASSWORD: raverse_secure_password_2025
      POSTGRES_DB: raverse
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raverse -d raverse"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - raverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis 8.2 with RDB + AOF persistence
  redis:
    image: redis:8.2
    container_name: raverse-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 60 1000
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --requirepass raverse_redis_password_2025
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - raverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # RAVERSE Application
  raverse-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: raverse-app
    environment:
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: raverse
      POSTGRES_PASSWORD: raverse_secure_password_2025
      POSTGRES_DB: raverse
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: raverse_redis_password_2025
      PYTHONUNBUFFERED: 1
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    volumes:
      - ./binaries:/app/binaries
      - ./logs:/app/logs
      - ./output:/app/output
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - raverse-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'

  # pgAdmin for PostgreSQL management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: raverse-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@raverse.local
      PGADMIN_DEFAULT_PASSWORD: admin_password_2025
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - dev

  # RedisInsight for Redis management (optional, for development)
  redisinsight:
    image: redis/redisinsight:latest
    container_name: raverse-redisinsight
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - dev

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: raverse-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: raverse-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password_2025
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: raverse-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://raverse:raverse_secure_password_2025@postgres:5432/raverse?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: raverse-redis-exporter
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: "raverse_redis_password_2025"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: raverse-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: raverse-node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - raverse-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  raverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  redisinsight_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

